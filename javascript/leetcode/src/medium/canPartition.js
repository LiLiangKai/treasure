/*
给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

 

示例 1：

输入：nums = [1,5,11,5]
输出：true
解释：数组可以分割成 [1, 5, 5] 和 [11] 。
示例 2：

输入：nums = [1,2,3,5]
输出：false
解释：数组不能分割成两个元素和相等的子集。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/partition-equal-subset-sum
*/

/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition = function(nums) {
    const sum = nums.reduce((sum, n) => {
        sum += n
        return sum
    }, 0)
    if(sum % 2 !== 0) return false
    const half = sum >> 1
    const cache = new Map()
    function dfs(sum, start) {
        if(sum === half) return true
        if(sum > half || start === nums.length-1) return false

        const key = `${sum}_${start}`
        if(cache.has(key)) {
          return cache.get(key)
        }

        const r = dfs(sum+nums[start], start+1) || dfs(sum, start+1)
        cache.set(key, r)
        return r
    }
    return dfs(0, 0)
};

console.log(canPartition