/*
编写一个程序，通过填充空格来解决数独问题。

数独的解法需 遵循如下规则：

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
数独部分空格内已填入了数字，空白格用 '.' 表示。

输入：board = [
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]

*/

/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solveSudoku = function ( board ) {
  const length = board.length

  function backtrack (row=0) {
    
  }

  backtrack()
  console.log(board)
};

function isValid (target, board, row, col) {
  const length = board.length
  // 检查同列不同行是否存在相同的数
  for(let i=0; i<length; i++) {
    if(board[i][col] !== '.' && board[i][col] === target) return false
  }

  // 检查同行不同列是否存在相同的数
  for(let i=0; i<length; i++) {
    if(board[row][i] !== '.' && board[row][i] === target) return false
  }

  // 检查3x3宫格是否存在相同的数
  const boxs = [[0,2],[3,5],[6,8]]
  const rowBox = boxs[(row / 3)|0]
  const colBox = boxs[(col / 3)|0]
  // console.log(target, row, col, rowBox, colBox)
  for(let r=rowBox[0]; r<=rowBox[1]; r++) {
    for(let c=colBox[0]; c<=colBox[1]; c++) {
      if ( board[ r ][ c ] !== '.' && board[ r ][ c ] === target ) return false
    }
  }

  return true
}


const board = [
  [ "5", "3", ".", ".", "7", ".", ".", ".", "." ],
  [ "6", ".", ".", "1", "9", "5", ".", ".", "." ],
  [ ".", "9", "8", ".", ".", ".", ".", "6", "." ],
  [ "8", ".", ".", ".", "6", ".", ".", ".", "3" ],
  [ "4", ".", ".", "8", ".", "3", ".", ".", "1" ],
  [ "7", ".", ".", ".", "2", ".", ".", ".", "6" ],
  [ ".", "6", ".", ".", ".", ".", "2", "8", "." ],
  [ ".", ".", ".", "4", "1", "9", ".", ".", "5" ],
  [ ".", ".", ".", ".", "8", ".", ".", "7", "9" ]
]

solveSudoku(board)
// console.log(board)